version: '3.8'

services:
  # --- PostgreSQL service ---
  postgres:
    image: postgres:14
    container_name: d2t_postgres
    environment:
      - POSTGRES_USER=Dorian
      - POSTGRES_PASSWORD=tqy4468
      - POSTGRES_DB=d2t_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
    networks:
      - d2t_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U Dorian -d d2t_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Go backend service ---
  go-backend:
    build: ./be-server
    container_name: go_service
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # 数据库连接信息
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: Dorian
      DB_PASS: tqy4468
      DB_NAME: d2t_db
      # 其他环境变量
      GO_ENV: production
    networks:
      - d2t_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  
  # --- Web Frontend service ---
  web-frontend:
    build:
      context: ./d2t-ui
      dockerfile: Dockerfile
    container_name: web_frontend
    # 在使用Nginx时，不直接暴露3000端口到主机
    # ports:
    #   - "3000:3000"
    depends_on:
      go-backend:
        condition: service_healthy
    environment:
      # 生产环境变量
      NODE_ENV: production
      # API服务地址 - 使用Docker网络中的服务名
      NEXT_PUBLIC_API_BASE_URL: http://go-backend:8080
    networks:
      - d2t_network
    restart: unless-stopped
    
  # --- Nginx service ---
  nginx:
    image: nginx:alpine
    container_name: d2t_nginx
    ports:
      - "80:80"
      - "443:443"  # 如果配置了SSL
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      # 如果配置了SSL，则需要挂载证书目录
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      web-frontend:
        condition: service_healthy
      go-backend:
        condition: service_healthy
    networks:
      - d2t_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# 定义共享网络
networks:
  d2t_network:
    driver: bridge

volumes:
  pgdata:
